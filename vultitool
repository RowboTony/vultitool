#!/usr/bin/env python3
"""
Vultitool - Vultisig CLI & Ecosystem Test Suite
The definitive CLI tool for Vultisig vault analysis, parsing, and testing.
"""

import sys
import argparse
from pathlib import Path

# Add our modules to path
sys.path.insert(0, str(Path(__file__).parent))

from commands.vault import VaultCommands
from commands.doctor import DoctorCommands

def main():
    parser = argparse.ArgumentParser(
        prog='vultitool',
        description='Vultisig CLI & Ecosystem Test Suite',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  vultitool vault parse file.vult              # Parse and display vault
  vultitool vault parse file.vult --json       # JSON output
  vultitool vault parse file.vult --summary    # Brief summary
  vultitool vault inspect file.vult            # Detailed inspection
  vultitool vault validate file.vult           # Validate vault format
  vultitool vault export file.vult output.json # Export to file
  
  vultitool doctor health                       # Quick health check
  vultitool doctor selftest                     # Run comprehensive tests
  vultitool doctor env                          # Environment diagnostics

For more information: https://github.com/vultisig/vultitool
        """
    )
    
    parser.add_argument('--version', action='version', version='vultitool 0.1.0')
    
    # Create subparsers for commands
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Vault subcommand
    vault_parser = subparsers.add_parser('vault', help='Vault operations')
    VaultCommands.setup_parser(vault_parser)
    
    # Doctor subcommand
    doctor_parser = subparsers.add_parser('doctor', help='Health checks and diagnostics')
    DoctorCommands.setup_parser(doctor_parser)
    
    # Parse arguments
    args = parser.parse_args()
    
    # Route to appropriate command handler
    if args.command == 'vault':
        return VaultCommands.handle(args)
    elif args.command == 'doctor':
        return DoctorCommands.handle(args)
    else:
        parser.print_help()
        return 1

if __name__ == '__main__':
    sys.exit(main())
